stages:
  - ðŸ‘®quality
  - ðŸ›°sonar
  - ðŸ‘·build
  - ðŸš€deploy-sqli
  - ðŸš€deploy-client

################################################################
# 0) SONAR                                                     #
################################################################

sonar:analyze:
  stage: ðŸ›°sonar
  before_script:
    - nvm install
    - nvm use
    - yarn
    - jabba use
    - yarn test --coverage
    - ./ci/updateSonarProjectVersion.sh
  script:
    - sonar-scanner
  allow_failure: true
  tags:
    - React-Native
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

################################################################
# 0) QUALITY                                                   #
################################################################

.quality: &quality
  stage: ðŸ‘®quality
  before_script:
    - nvm install
    - nvm use
    - yarn
  tags:
    - React-Native
  allow_failure: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^develop$/'

typescript:
  <<: *quality
  script:
    - yarn tsc

prettier:
  <<: *quality
  script:
    - yarn prettier

eslint:
  <<: *quality
  script:
    - yarn lint

jest:
  <<: *quality
  script:
    - yarn test --coverage

################################################################
# 1) BUILD                                                     #
################################################################
# Template
.buildAndroid: &buildAndroid
  stage: ðŸ‘·build
  before_script:
    - nvm install
    - nvm use
    - yarn
    - jabba use
    - cd ci/fastlane && bundle install
  script:
    - bundle exec fastlane android build --env ${BUILD_ENV}
  tags:
    - React-Native
  allow_failure: true
  artifacts:
    paths:
      - android/app/build/outputs/apk/${BUILD_ENV}
    expire_in: 2 weeks

.buildiOS: &buildiOS
  stage: ðŸ‘·build
  variables:
    SECURE_FILES_DOWNLOAD_PATH: './certificates'
  before_script:
    - nvm install
    - nvm use
    - yarn
    - cd ci/fastlane && bundle install
    - bundle exec "cd ../../ios && pod install --repo-update"
  script:
    - bundle exec fastlane ios build --env ${BUILD_ENV}
  tags:
    - Xcode14
  allow_failure: true
  artifacts:
    paths:
      - ios/build/ipa/
    expire_in: 2 weeks
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^develop$/'

# Jobs
ðŸ› build:ios:dev:
  <<: *buildiOS
  variables:
    BUILD_ENV: dev
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/

ðŸ› build:ios:production:
  <<: *buildiOS
  variables:
    BUILD_ENV: production
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/

ðŸ› build:android:dev:
  <<: *buildAndroid
  variables:
    BUILD_ENV: dev
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/

ðŸ› build:android:production:
  <<: *buildAndroid
  variables:
    BUILD_ENV: production
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/

################################################################
# 2) DEPLOY SQLI                                               #
################################################################

# Templates
.deploy: &deploy
  before_script:
    - cd ci/
    - bundle install
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
  variables:
    SECURE_FILES_DOWNLOAD_PATH: './certificates'
  script:
    - bundle exec fastlane ${BUILD_PLATFORM} deploy_to_store store:${DEPLOY_STORE} --env ${BUILD_ENV}
  tags:
    - React-Native

# Jobs
ðŸš€deploy-sqli:ios:dev:
  <<: *deploy
  stage: ðŸš€deploy-sqli
  variables:
    BUILD_PLATFORM: ios
    BUILD_ENV: dev
    DEPLOY_STORE: privateSQLI
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/
  dependencies:
    - ðŸ› build:ios:dev

ðŸš€deploy-sqli:android:dev:
  <<: *deploy
  stage: ðŸš€deploy-sqli
  variables:
    BUILD_PLATFORM: android
    BUILD_ENV: dev
    DEPLOY_STORE: privateSQLI
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/
  dependencies:
    - ðŸ› build:android:dev

################################################################
# 3) DEPLOY CLIENT                                             #
################################################################

ðŸš€deploy-client:ios:dev:
  <<: *deploy
  stage: ðŸš€deploy-client
  variables:
    BUILD_PLATFORM: ios
    BUILD_ENV: dev
    DEPLOY_STORE: privateSQLI
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/
  dependencies:
    - ðŸ› build:ios:dev

ðŸš€deploy-client:android:dev:
  <<: *deploy
  stage: ðŸš€deploy-client
  variables:
    BUILD_PLATFORM: android
    BUILD_ENV: dev
    DEPLOY_STORE: privateClient
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/
  dependencies:
    - ðŸ› build:android:drdevgon
  when: manual

ðŸš€deploy-client:ios:production:
  <<: *deploy
  stage: ðŸš€deploy-client
  variables:
    BUILD_PLATFORM: ios
    BUILD_ENV: production
    DEPLOY_STORE: privateSQLI
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/
  dependencies:
    - ðŸ› build:ios:dev

ðŸš€deploy-client:android:production:
  <<: *deploy
  stage: ðŸš€deploy-client
  variables:
    BUILD_PLATFORM: android
    BUILD_ENV: production
    DEPLOY_STORE: privateClient
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release.*$/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix.*$/
  dependencies:
    - ðŸ› build:android:drdevgon
  when: manual